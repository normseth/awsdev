{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Creates a VPC with a single subnet, and a load-balanced autoscale group of instances.",

  "Parameters" : {

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium"],
      "ConstraintDescription" : "Restricted set for purposes of demo: t1.micro, m1.small, m1.medium."
    },

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },
    
    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "198.162.93.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "OperatorEmail": {
      "Description": "Email address to notify if there are any scaling operations",
      "Type": "String",
      "Default": "nikormseth@level11.com"
    },

   "InstanceCount" : {
      "Description" : "Number of EC2 instances to launch",
      "Type" : "Number",
      "Default" : "2"
    },

    "WebServerPort" : {
      "Description" : "TCP/IP port of the web server",
      "Type" : "String",
      "Default" : "80"
    }, 

    "ChefWebServerRunList": {
      "Description": "The Chef runlist that should be set for web server instances",
      "Type": "String",
      "Default": "recipe[apache-site]"
    },

    "ChefWebServerRole": {
      "Description": "The name of the chef role that should be applied to web server instances",
      "Type": "String",
      "Default": "webserver"
    },

    "DomainName": {
      "Description": "The domain for the server",
      "Type": "String",
      "Default": "demo.level11.com"
    },

    "ChefEnvironment": {
      "Description": "The Chef environment",
      "Type": "String",
      "Default": "_default"
    },

    "ChefOrganization": {
      "Description": "The Chef organization",
      "Type": "String",
      "Default": "level11-demo"
    },

    "ASGQueueUser": {
      "Description": "AWS user to receive events via SQS",
      "Type": "String",
      "Default": "ChefUser"
    },

    "AZ": {
      "Description": "Availability zone into which to place servers",
      "Type": "String",
      "Default": "us-west-2c"
    }

  },

  "Mappings" : {
    "RegionMap" : {
      "us-west-2"      : { "AMI" : "ami-fa9cf1ca" }
    }
  },

  "Resources" : {

    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ 
          { "Endpoint" : { "Ref": "OperatorEmail" }, "Protocol": "email" }, 
          { "Endpoint" : { "Fn::GetAtt" : ["ASGQueue", "Arn"]}, "Protocol" : "sqs" }
        ]
      }
    },

    "ASGQueue" : {
      "Type" : "AWS::SQS::Queue"
    },

    "ASGQueueGroup" : {
    "Type" : "AWS::IAM::Group",
    "Properties" : {
      "Policies": [ {
          "PolicyName": "MyQueueGroupPolicy",
          "PolicyDocument": { "Statement": [
            {
              "Effect":"Allow",
              "Action":[
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage"  
              ],
              "Resource":[
                { "Fn::GetAtt" : ["ASGQueue", "Arn"]}
              ]
            }
          ]}
        }]
      }
    },

    "AddUserToASGQueueGroup" : {
      "Type" : "AWS::IAM::UserToGroupAddition",
      "Properties" : {
        "GroupName": {"Ref" : "ASGQueueGroup"},
        "Users" : [{ "Ref" : "ASGQueueUser" }]
      }
    },

    "ASGQueuePolicy" : {
      "Type" : "AWS::SQS::QueuePolicy",
      "Properties" : {
        "PolicyDocument":  {
          "Id":"MyQueuePolicy",
          "Statement" : [
            {
              "Sid":"Allow-SendMessage-To-ASGQueue-From-NotificationTopic",
        "Effect":"Allow",
        "Principal" : {"AWS" : "*"},
        "Action":["sqs:SendMessage"],
        "Resource": "*",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": { "Ref" : "NotificationTopic" }
                }
              }
            }
          ]
        },
        "Queues" : [ {"Ref" : "ASGQueue"} ]
      }
    },

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "Tags" : [ {"Key" : "CFStack", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "Subnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Ref" : "AZ" },
        "CidrBlock" : "10.0.0.0/24",
        "Tags" : [ {"Key" : "CFStack", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "CFStack", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "CFStack", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "Route" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "SubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },

    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "CFStack", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "InboundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },

    "InboundSSHNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },

    "InboundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },

    "OutBoundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },

    "OutBoundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },

    "OutBoundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },

    "SubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },

    "InstanceSecurityGroup" : {   
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
          { 
            "IpProtocol" : "tcp", 
            "FromPort" : { "Ref" : "WebServerPort"}, 
            "ToPort" : { "Ref" : "WebServerPort"}, 
            "CidrIp" : "0.0.0.0/0"
          }
         ]
      }
    },

    "InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : ["bootstrap-bucket-read"]
      }
    },

    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [ { "Ref" : "Subnet" } ],
        "AvailabilityZones" : [ { "Ref" : "AZ" } ],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "3",
        "DesiredCapacity" : { "Ref" : "InstanceCount" },
        "LoadBalancerNames" : [ { "Ref" : "CFNLB" } ],
        "Tags" : [ {
          "Key" : "ChefRole",
          "Value" : { "Ref" : "ChefWebServerRole"},
          "PropagateAtLaunch" : "true"
        } ],
        "NotificationConfiguration": {
          "TopicARN": { "Ref": "NotificationTopic"},
          "NotificationTypes": ["autoscaling:EC2_INSTANCE_LAUNCH", "autoscaling:EC2_INSTANCE_LAUNCH_ERROR", "autoscaling:EC2_INSTANCE_TERMINATE", "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
        }

      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "apt": {
                "build-essential": [],
                "ruby1.9.3": []
              },
              "rubygems": {
                "chef": [],
                "ohai": [],
                "aws-sdk": []
              }
            },
            "files": {
              "/etc/chef/first-boot.json": {
                "content": {
                  "run_list": {
                    "Ref": "ChefWebServerRunList"
                  }
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"      
              },
              "/home/ubuntu/s3get.rb": {
                "content": {
                  "Fn::Join": ["", [
                    "require 'rubygems' \n",
                    "require 'aws-sdk' \n",

                    "s3 = AWS::S3.new() \n",

                    "bucket_name = 'level11-devops-demo' \n",

                    "ARGV.each do |obj_name| \n",
                    "  srcfile = s3.buckets[bucket_name].objects[obj_name] \n",
                    "  destfile = '/etc/chef/' + obj_name \n",
                    "  File.open(destfile, \"w\") do |f| \n",
                    "    f.write(srcfile.read) \n",
                    "  end \n",
                    "end \n"
                  ]]
                },
                "mode": "000644",
                "owner": "ubuntu",
                "group": "ubuntu"
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "IamInstanceProfile" : {"Ref" : "InstanceProfile"},
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "AssociatePublicIpAddress" : true,
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -ex\n",

          "# Install AWS CFN bootstrapping tools \n",
          "apt-get update -y\n",
          "apt-get -y install python-setuptools\n",
          "wget -P /root https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
          "mkdir -p /root/aws-cfn-bootstrap-latest\n",
          "tar xvfz /root/aws-cfn-bootstrap-latest.tar.gz --strip-components=1 -C /root/aws-cfn-bootstrap-latest\n",
          "easy_install /root/aws-cfn-bootstrap-latest/\n",

          "# Helper function \n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "LaunchConfigWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Bootstrap Chef \n",
          "mkdir -p /etc/chef \n",
          "/usr/local/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r LaunchConfig ",
          "     --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to start cfn-init'\n",
          "ruby /home/ubuntu/s3get.rb chef-client-setup.rb validation.pem databag-key\n",
          "ruby /etc/chef/chef-client-setup.rb ", {"Ref" : "DomainName"}, " ", { "Ref" : "ChefEnvironment"}, 
          "     ", {"Ref" : "ChefOrganization"}, "\n",
          "chef-client -j /etc/chef/first-boot.json \n",

          "# All done, so signal happy\n",
          "cfn-signal -e 0 -r \"WebServer setup complete\" '", { "Ref" : "LaunchConfigWaitHandle" }, "'\n"

        ]]}}        
      }
    },

    "CFNLB" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "SecurityGroups" : [ { "Ref" : "LoadBalancerSecurityGroup" } ],
        "Subnets" : [ { "Ref" : "Subnet" } ],
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : { "Ref" : "WebServerPort" },
          "Protocol" : "HTTP"
        } ],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : [ "", ["HTTP:", { "Ref" : "WebServerPort" }, "/"]]},
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "25"
        }
      }
    },

    "LoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access on port 80",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ { 
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        } ],
        "SecurityGroupEgress" : [ { 
          "IpProtocol" : "tcp",
          "FromPort" : { "Ref" : "WebServerPort" },
          "ToPort" : { "Ref" : "WebServerPort" },
          "CidrIp" : "0.0.0.0/0"
        } ]
      }
    },

    "LaunchConfigWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "LaunchConfigCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "LaunchConfig",
      "Properties" : {
        "Handle" : {"Ref" : "LaunchConfigWaitHandle"},
        "Timeout" : "1500"
      }
    }

  },

  "Outputs" : {
    "ELB" : {
      "Value" : { "Fn::GetAtt" : ["CFNLB", "DNSName"] },
      "Description" : "DNS name of ELB"
    },
    "ChefEnvironment" : {
      "Value" : { "Ref" : "ChefEnvironment" },
      "Description" : "Chef Environment Name"
    },
    "ChefOrganization" : {
      "Value" : { "Ref" : "ChefOrganization" },
      "Description" : "Chef Organization Name"
    }
  }
}

